<?php

namespace App\Models;

use App\Config\Database;
use App\Helpers\ErrorHandler;
use App\Helpers\AuditLogger;

class Pupil {
    protected $db;
    
    public function __construct() {
        $this->db = Database::getInstance()->getConnection();
    }

    public function getAllPupils() {
        try {
            $sql = "SELECT p.pupil_id, p.matricule, p.first_name, p.last_name, 
                           p.class, p.status, p.parent_id,
                           pr.username as parent_name 
                    FROM pupils p 
                    LEFT JOIN parents pr ON p.parent_id = pr.parent_id 
                    ORDER BY p.class, p.first_name, p.last_name";
            
            $stmt = $this->db->query($sql);
            return $stmt->fetchAll();
        } catch (\PDOException $e) {
            ErrorHandler::logError("Database error in getAllPupils: " . $e->getMessage());
            throw $e;
        }
    }

    public function getPupilsByClass($class) {
        $sql = "SELECT p.*, pr.username as parent_name 
                FROM pupils p 
                LEFT JOIN parents pr ON p.parent_id = pr.parent_id 
                WHERE p.class = ? 
                ORDER BY p.first_name, p.last_name";
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$class]);
        return $stmt->fetchAll();
    }

    public function createPupil($data) {
        try {
            $this->db->beginTransaction();

            // Generate matricule
            $matricule = 'PUP' . str_pad(mt_rand(1, 9999), 4, '0', STR_PAD_LEFT);

             // Convert class ID to class name
            $data['class'] = $classList[$data['class']] ?? $data['class']; 
            
            $sql = "INSERT INTO pupils (matricule, first_name, last_name, date_of_birth, 
                                      gender, parent_id, class, admission_date, status) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, CURDATE(), 'active')";
            
            $stmt = $this->db->prepare($sql);
            $result = $stmt->execute([
                $matricule,
                $data['first_name'],
                $data['last_name'],
                $data['date_of_birth'],
                $data['gender'],
                $data['parent_id'],
                $data['class']
            ]);

            if ($result) {
                $pupilId = $this->db->lastInsertId();
                AuditLogger::log('create', 'pupil', $pupilId, null, $data);
                $this->db->commit();
                return $pupilId;
            }

            $this->db->rollBack();
            return false;
        } catch (\PDOException $e) {
            $this->db->rollBack();
            throw $e;
        }
    }

    public function updatePupil($id, $data) {
        try {
            $this->db->beginTransaction();

            $oldData = $this->getPupilById($id);
            
            $sql = "UPDATE pupils 
                    SET first_name = ?, last_name = ?, date_of_birth = ?, 
                        gender = ?, parent_id = ?, class = ?, status = ? 
                    WHERE pupil_id = ?";
            
            $stmt = $this->db->prepare($sql);
            $result = $stmt->execute([
                $data['first_name'],
                $data['last_name'],
                $data['date_of_birth'],
                $data['gender'],
                $data['parent_id'],
                $data['class'],
                $data['status'],
                $id
            ]);

            if ($result) {
                AuditLogger::log('update', 'pupil', $id, $oldData, $data);
                $this->db->commit();
                return true;
            }

            $this->db->rollBack();
            return false;
        } catch (\PDOException $e) {
            $this->db->rollBack();
            ErrorHandler::logError("Database error in updatePupil: " . $e->getMessage(), [
                'id' => $id,
                'data' => $data,
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }

    public function getPupilById($id) {
        try {
            $sql = "SELECT p.pupil_id, p.matricule, p.first_name, p.last_name,
                           p.date_of_birth, p.gender, p.parent_id, p.class,
                           p.status, p.admission_date,
                           pr.username as parent_name 
                    FROM pupils p 
                    LEFT JOIN parents pr ON p.parent_id = pr.parent_id 
                    WHERE p.pupil_id = ?";
            $stmt = $this->db->prepare($sql);
            $stmt->execute([$id]);
            $result = $stmt->fetch();
            
            if (!$result) {
                return null;
            }
            
            return $result;
        } catch (\PDOException $e) {
            ErrorHandler::logError("Database error in getPupilById: " . $e->getMessage(), [
                'pupil_id' => $id,
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }
    // Get all classes
    public function getClassList($onlyActive = false) {
        try {
            if ($onlyActive) {
                // For report cards and filters - only classes with active pupils
                $sql = "SELECT DISTINCT class FROM pupils WHERE status = 'active' ORDER BY class";
                $stmt = $this->db->query($sql);
                return $stmt->fetchAll(\PDO::FETCH_COLUMN);
            } else {
                // For enrollment - return all possible classes
                return [
                    'Class 1',
                    'Class 2',
                    'Class 3',
                    'Class 4',
                    'Class 5',
                    'Class 6'
                ];
            }
        } catch (\PDOException $e) {
            ErrorHandler::logError("Database error in getClassList: " . $e->getMessage());
            throw $e;
        }
    }

    public function getAcademicHistory($pupilId) {
        $sql = "SELECT r.*, 
                       (SELECT COUNT(*) FROM results r2 
                        WHERE r2.academic_year = r.academic_year 
                        AND r2.term = r.term 
                        AND r2.class = r.class) as total_students
                FROM results r
                WHERE r.pupil_id = ?
                ORDER BY r.academic_year DESC, r.term DESC";
        
        $stmt = $this->db->prepare($sql);
        $stmt->execute([$pupilId]);
        return $stmt->fetchAll();
    }

    public function getActiveStudentsByClass($class) {
        try {
            $sql = "SELECT * FROM pupils 
                    WHERE class = ? AND status = 'active' 
                    ORDER BY first_name, last_name";
            
            $stmt = $this->db->prepare($sql);
            $stmt->execute([$class]);
            
            // For debugging
            error_log("Fetching pupils for class: $class");
            $pupils = $stmt->fetchAll();
            error_log("Found " . count($pupils) . " pupils");
            
            return $pupils;
        } catch (\PDOException $e) {
            ErrorHandler::logError("Database error in getActiveStudentsByClass: " . $e->getMessage());
            throw $e;
        }
    }

    public function getClassCount($class) {
        try {
            $sql = "SELECT COUNT(*) as count 
                    FROM pupils 
                    WHERE class = ? AND status = 'active'";
            
            $stmt = $this->db->prepare($sql);
            $stmt->execute([$class]);
            $result = $stmt->fetch();
            
            // For debugging
            error_log("Getting count for class: $class, count: {$result['count']}");
            
            return (int)$result['count'];
        } catch (\PDOException $e) {
            ErrorHandler::logError("Database error in getClassCount: " . $e->getMessage());
            throw $e;
        }
    }
} 



--------------------------------------------------

<?php

namespace App\Controllers;

use App\Models\Pupil;
use App\Models\Parent;
use App\Helpers\AuthHelper;
use App\Helpers\ValidationHelper;
use App\Helpers\SanitizationHelper;
use App\Helpers\ErrorHandler;

class PupilController {
    private $pupil;
    private $parent;
    private $validator;

    public function __construct() {
        $this->pupil = new Pupil();
        $this->parent = new Parent();
        $this->validator = new ValidationHelper();
    }

    public function index() {
        AuthHelper::requireRole(['admin', 'teacher']);
        $pupils = $this->pupil->getAllPupils();
        require __DIR__ . '/../views/admin/pupils/index.php';
    }

    public function add() {
        AuthHelper::requireRole('admin');
        $errors = [];
        $parents = $this->parent->getAllActiveParents();
        $classList = $this->pupil->getClassList();

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // cleaning the data
            $sanitizedData = [
                'first_name' => SanitizationHelper::sanitizeName($_POST['first_name']),
                'last_name' => SanitizationHelper::sanitizeName($_POST['last_name']),
                'date_of_birth' => SanitizationHelper::sanitize($_POST['date_of_birth']),
                'gender' => SanitizationHelper::sanitize($_POST['gender']),
                'parent_id' => (int)$_POST['parent_id'],
                'class' => SanitizationHelper::sanitize($_POST['class'])
            ];

            // validating the data
            $rules = [
                'first_name' => ['required', ['min', 2], ['max', 50]],
                'last_name' => ['required', ['min', 2], ['max', 50]],
                'date_of_birth' => ['required', 'date'],
                'gender' => ['required', ['in', ['M', 'F']]],
                'parent_id' => ['required', 'exists:parents,parent_id'],
                'class' => ['required', ['in', array_keys($this->pupil->getClassList())]]
            ];

            // if the data is valid, create the pupil
            if ($this->validator->validate($sanitizedData, $rules)) {
                try {
                    // create the pupil
                    $pupilId = $this->pupil->createPupil($sanitizedData);
                    if ($pupilId) {
                        ErrorHandler::setSuccess("Pupil registered successfully with ID: " . $pupilId);
                        header('Location: /admin/pupils');
                        exit;
                    }
                        } catch (\PDOException $e) {
                 // log the error
                    ErrorHandler::logError("Failed to create pupil", [
                        'error' => $e->getMessage(),
                        'data' => $sanitizedData
                    ]);
                    $errors['database'] = "Failed to register pupil. Please try again.";
                }
            } else {
                $errors = $this->validator->getErrors();
            }
        }

        require __DIR__ . '/../views/admin/pupils/add.php';
    }
// edit the pupil
    public function edit($id) {
        AuthHelper::requireRole('admin');
        $errors = [];
        $parents = $this->parent->getAllActiveParents();
        $classList = $this->pupil->getClassList();

        $pupil = $this->pupil->getPupilById($id);
        if (!$pupil) {
            header('Location: /admin/pupils');
            exit;
        }

        // if the data is submitted, update the pupil
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $sanitizedData = [
                'first_name' => SanitizationHelper::sanitizeName($_POST['first_name']),
                'last_name' => SanitizationHelper::sanitizeName($_POST['last_name']),
                'date_of_birth' => SanitizationHelper::sanitize($_POST['date_of_birth']),
                'gender' => SanitizationHelper::sanitize($_POST['gender']),
                'parent_id' => (int)$_POST['parent_id'],
                'class' => SanitizationHelper::sanitize($_POST['class']),
                'status' => SanitizationHelper::sanitize($_POST['status'])
            ];

            // validating the data
            $rules = [
                'first_name' => ['required', ['min', 2], ['max', 50]],
                'last_name' => ['required', ['min', 2], ['max', 50]],
                'date_of_birth' => ['required', 'date'],
                'gender' => ['required', ['in', ['M', 'F']]],
                'parent_id' => ['required', 'exists:parents,parent_id'],
                'class' => ['required', ['in', array_keys($this->pupil->getClassList())]],
                'status' => ['required', ['in', ['active', 'inactive', 'graduated']]]
            ];

            // if the data is valid, update the pupil
            if ($this->validator->validate($sanitizedData, $rules)) {
                try {
                    if ($this->pupil->updatePupil($id, $sanitizedData)) {
                        ErrorHandler::setSuccess("Pupil updated successfully");
                        header('Location: /admin/pupils');
                        exit;
                    }
                } catch (\PDOException $e) {
                    // log the error
                    ErrorHandler::logError("Failed to update pupil", [
                        'error' => $e->getMessage(),
                        'data' => $sanitizedData
                    ]);
                    $errors['database'] = "Failed to update pupil. Please try again.";
                }
            } else {
                $errors = $this->validator->getErrors();
            }
        }

        require __DIR__ . '/../views/admin/pupils/edit.php';
    }
// view the pupil       
    public function view($id) {
        AuthHelper::requireRole(['admin', 'teacher', 'parent']);
        
        $pupil = $this->pupil->getPupilById($id);
        if (!$pupil) {
            header('Location: /admin/pupils');
            exit;
        }

        // Check if parent is authorized to view this pupil
        if ($_SESSION['user_type'] === 'parent') {
            if ($_SESSION['user_id'] !== $pupil['parent_id']) {
                http_response_code(403);
                require __DIR__ . '/../views/errors/403.php';
                exit;
            }
        }

        // Get parent details
        $parent = $this->parent->getParentById($pupil['parent_id']);

        // Get academic history
        $academicHistory = $this->pupil->getAcademicHistory($id);

        require __DIR__ . '/../views/admin/pupils/view.php';
    }
} 


----------------------------

<?php
$title = 'Add New Pupil';
ob_start();
?>

<div class="container mx-auto px-4">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <h2 class="text-2xl font-bold mb-6">Add New Pupil</h2>

        <?php if (!empty($errors)): ?>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                <?php foreach ($errors as $error): ?>
                    <p><?= $error[0] ?></p>
                <?php endforeach; ?>
            </div>
        <?php endif; ?>

        <form action="<?= url('admin/pupils/add') ?>" method="POST" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="first_name">
                        First Name
                    </label>
                    <input type="text" id="first_name" name="first_name" required
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <div>
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="last_name">
                        Last Name
                    </label>
                    <input type="text" id="last_name" name="last_name" required
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <div>
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="date_of_birth">
                        Date of Birth
                    </label>
                    <input type="date" id="date_of_birth" name="date_of_birth" required
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>

                <div>
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="gender">
                        Gender
                    </label>
                    <select id="gender" name="gender" required
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        <option value="">Select Gender</option>
                        <option value="M">Male</option>
                        <option value="F">Female</option>
                    </select>
                </div>

                <div>
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="parent_id">
                        Parent
                    </label>
                    <select id="parent_id" name="parent_id" required
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        <option value="">Select Parent</option>
                        <?php foreach ($parents as $parent): ?>
                            <option value="<?= $parent['parent_id'] ?>">
                                <?= htmlspecialchars($parent['username']) ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </div>

                <div>
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="class">
                        Class
                    </label>
                    <select id="class" name="class" required
                            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        <option value="">Select Class</option>
                        <?php foreach ($classList as $key => $value): ?>
                            <option value="<?= $key ?>"><?= $value ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
            </div>

            <div class="flex items-center justify-end">
                <button type="submit" 
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                    Add Pupil
                </button>
            </div>
        </form>
    </div>
</div>

<?php
$content = ob_get_clean();
require __DIR__ . '/../../layouts/dashboard.php';
?> 


